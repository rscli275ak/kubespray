# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
    common = <<-SHELL
    if ! grep -q kdeploykub /etc/hosts; then  sudo echo "192.168.7.120     kdeploykub" >> /etc/hosts ;fi
    if ! grep -q kmaster01 /etc/hosts; then  sudo echo "192.168.7.121     kmaster01" >> /etc/hosts ;fi
    if ! grep -q kmaster02 /etc/hosts; then  sudo echo "192.168.7.122     kmaster02" >> /etc/hosts ;fi
    if ! grep -q knode01 /etc/hosts; then  sudo echo "192.168.7.123     knode01" >> /etc/hosts ;fi
    if ! grep -q haproxy01 /etc/hosts; then  sudo echo "192.168.7.124     haproxy01" >> /etc/hosts ;fi
    if ! grep -q haproxy02 /etc/hosts; then  sudo echo "192.168.7.125     haproxy02" >> /etc/hosts ;fi
    #if ! id admin >  /dev/null 2>&1 ; then sudo useradd -G 10 -p $(openssl passwd -1 redhat) admin; fi
    #if [ ! -f /etc/sudoers.d/admin ] ; then sudo echo "admin        ALL=(ALL)       NOPASSWD: ALL" > /etc/sudoers.d/admin ; fi
    sudo yum -y install vim tree net-tools telnet git python3-pip sshpass
    sudo echo "autocmd filetype yaml setlocal ai ts=2 sw=2 et" > /home/vagrant/.vimrc
    sed -i 's/ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config
    systemctl reload sshd
    SHELL
    
    kdeploykub = <<-SHELL
    pip3 install --user ansible
    git clone https://github.com/kubernetes-sigs/kubespray.git /home/vagrant/kubespray
    pip3 install --user -r /home/vagrant/kubespray/requirements.txt
    echo "[privilege_escalation]" >> /home/vagrant/kubespray/ansible.cfg
    echo "become=True" >> /home/vagrant/kubespray/ansible.cfg
    echo "become_method=sudo" >> /home/vagrant/kubespray/ansible.cfg
    echo "become_user=sudo" >> /home/vagrant/kubespray/ansible.cfg
    echo "become_ask_pass=False" >> /home/vagrant/kubespray/ansible.cfg
    cp -rfp inventory/sample inventory/cluster
    declare -a IPS=(192.168.7.121 192.168.7.122 192.168.7.123)
    CONFIG_FILE=inventory/cluster/hosts.yaml python3 contrib/inventory_builder/inventory.py ${IPS[@]}
    SHELL

    haproxy = <<-SHELL
    sudo yum install -y keepalived haproxy psmisc.x86_64
    setsebool -P haproxy_connect_any=1
    SHELL

    haproxy_restart = <<-SHELL
    sudo systemctl restart haproxy
    sudo systemctl restart keepalived
    SHELL

    config.vm.box = "centos/7"
    config.vm.box_url = "centos/7"
  
      config.vm.define "haproxy01" do |haproxy01|
        haproxy01.vm.hostname = "haproxy01"
        haproxy01.vm.network "private_network", ip: "192.168.7.124"
        haproxy01.vm.provider "virtualbox" do |v|
            v.customize [ "modifyvm", :id, "--cpus", "1" ]
            v.customize [ "modifyvm", :id, "--memory", "512" ]
            v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
            v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
            v.customize ["modifyvm", :id, "--name", "haproxy01"]
            v.customize ["modifyvm", :id, "--audio", "none"]
        end
        config.vm.provision :shell, :inline => common
        config.vm.provision :shell, :inline => haproxy
        config.vm.provision "file", source: "haproxy.cfg", destination: "/tmp/haproxy.cfg"          
        config.vm.provision "shell", inline: "mv /tmp/haproxy.cfg /etc/haproxy/haproxy.cfg"
        config.vm.provision "file", source: "keepalived_master.conf", destination: "/tmp/keepalived.conf"
        config.vm.provision "shell", inline: "mv /tmp/keepalived.conf /etc/keepalived/keepalived.conf"
        config.vm.provision :shell, :inline => haproxy_restart
      end
      config.vm.define "haproxy02" do |haproxy02|
            haproxy02.vm.hostname = "haproxy02"
            haproxy02.vm.network "private_network", ip: "192.168.7.125"
            haproxy02.vm.provider "virtualbox" do |v|
                v.customize [ "modifyvm", :id, "--cpus", "1" ]
                v.customize [ "modifyvm", :id, "--memory", "512" ]
                v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
                v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
                v.customize ["modifyvm", :id, "--name", "haproxy02"]
                v.customize ["modifyvm", :id, "--audio", "none"]
            end
            config.vm.provision :shell, :inline => common
            config.vm.provision :shell, :inline => haproxy
            config.vm.provision "file", source: "haproxy.cfg", destination: "/tmp/haproxy.cfg"          
            config.vm.provision "shell", inline: "mv /tmp/haproxy.cfg /etc/haproxy/haproxy.cfg"
            config.vm.provision "file", source: "keepalived_backup.conf", destination: "/tmp/keepalived.conf"
            config.vm.provision "shell", inline: "mv /tmp/keepalived.conf /etc/keepalived/keepalived.conf"
            config.vm.provision :shell, :inline => haproxy_restart
        end
  end